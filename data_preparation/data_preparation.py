import matplotlib.pyplot as plt
import numpy as np
import string
from bitstring import *

# Load a bit-stream file generated by GNU Radio. One char means one bit. 
# 53 ones means 1, 53 zeros means 0 (53 bits per a single symbol).
with open('example.txt', 'rb') as fh:
    loaded_array = np.frombuffer(fh.read(), dtype=np.uint8)
file_size = loaded_array.size

# Decides that the 53 ones/zeros means a single symbol.
def decide(value):
    output = value/53
    if (value%53)>30:
        output = output+1
    return output;

# Counting ones/zeros and translating to real bit-stream
output_list = []
bits_count=0
current_bit=0
bits = BitArray('')

for i in range(0, file_size-1):
    if current_bit==loaded_array[i]:
        bits_count=bits_count+1
    else:
        output_list.append([current_bit,bits_count,decide(bits_count)])
        for single_bit in reversed(range(0,decide(bits_count))):
            if current_bit:
                bits.append('0b1')
            else:
                bits.append('0b0')
        current_bit=loaded_array[i]
        bits_count=0

# Inverting and bit-correction
bits.invert()
bits.insert('0b0000',0)    # Insert a bit shift to see the 0x7E flag after descrambling (please see the AX.25 standard)
bits.append('0b000')       # Bit-stream must be multiples of 4

# Generating C code for G3RUH descrambler nad NRZI decoder
hex_count = len(bits.hex)
output_string = 'uint8_t demodulated_data[] = {'
bytes = BitArray('')

for i in xrange(0, hex_count-1, 2):
    output_string=output_string+ '0x'
    bytes.hex = bits.hex[i+1]
    bytes.reverse()
    output_string=output_string + bytes.hex
    bytes.hex = bits.hex[i]
    bytes.reverse()
    output_string=output_string + bytes.hex
    if i<(hex_count-2):
        output_string=output_string+ ','

output_string=output_string+ '};'

# Generated C code
print output_string